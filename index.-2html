<html><head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Timesheet App</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #e6f2ff;
    }
    .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .header-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }
    h1 {
        color: #003366;
        text-align: center;
        flex-grow: 1;
    }
    .logo {
        max-height: 80px;
        width: auto;
        margin-left: 20px;
    }
    button {
        background-color: #0066cc;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 5px;
    }
    input, select {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
    table {
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        text-align: left;
        padding: 8px;
        border-bottom: 1px solid #ddd;
    }
    th {
        background-color: #0066cc;
        color: white;
    }
    .required {
        color: #cc0000;
        font-size: 0.8em;
        display: block;
        margin-bottom: 5px;
    }
    .if-any {
        color: #666666;
        font-size: 0.8em;
        display: block;
        margin-bottom: 5px;
    }
    .input-group {
        margin-bottom: 15px;
    }
    .task-form-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        padding: 20px;
    }
    .task-form-grid .input-group {
        margin-bottom: 0;
    }
    .input-error {
        border: 2px solid #cc0000 !important;
    }
    .table-container {
        width: 100%;
        overflow-x: auto;
    }
    #summaryTable {
        min-width: 100%;
        width: max-content;
    }
    @media (max-width: 1067px) {
        .table-container {
            overflow-x: auto;
        }
    }
    @media (max-width: 600px) {
        .task-form-grid {
            grid-template-columns: 1fr;
            padding: 10px;
        }
    }
</style>
</head>
<body>
    <div class="container" id="welcomePage">
        <div class="header-container">
            <h1>Timesheet App</h1>
        </div>
        <p id="dateTime"></p>
        <p id="greeting"></p>
        <p>Are you ready to start?</p>
        <button onclick="startApp()">I'm Ready!</button>
    </div>

    <div class="container" id="appPage" style="display:none;">
        <h1>Employee Timesheet</h1>
        <div id="employeeInfo">
            <div class="input-group">
                <label for="employeeName">Employee Name</label>
                <span class="required">(required)</span>
                <input type="text" id="employeeName" placeholder="John Doe" required>
            </div>
            <div class="input-group">
                <label for="hourlyRate">Hourly Rate</label>
                <span class="required">(required)</span>
                <input type="number" id="hourlyRate" placeholder="$$$" required min="0.01" step="0.01">
            </div>
            <button onclick="startTimesheet()">Start Timesheet</button>
        </div>
        <div id="taskForm" style="display:none;">
            <h2>Task <span id="taskNumber">1</span></h2>
            <div class="task-form-grid">
                <div class="input-group">
                    <label for="taskDate">Date</label>
                    <span class="required">(required)</span>
                    <input type="date" id="taskDate" required>
                </div>
                <div class="input-group">
                    <label for="hoursWorked">Worked Hours</label>
                    <span class="required">(required)</span>
                    <input type="number" id="hoursWorked" placeholder="Per Task Hours" required min="1" step="1">
                </div>
                <div class="input-group">
                    <label for="property">Property</label>
                    <span class="required">(required)</span>
                    <select id="property" required>
                        <option value="">Select Property</option>
                        <option value="Belton MHP Homes LLC">Belton MHP Homes LLC</option>
                        <option value="Belton MHP Land LLC">Belton MHP Land LLC</option>
                        <option value="Canton MHP Homes LLC">Canton MHP Homes LLC</option>
                        <option value="Canton MHP Land LLC">Canton MHP Land LLC</option>
                        <option value="Columbia 2 MHP Homes LLC">Columbia 2 MHP Homes LLC</option>
                        <option value="Columbia 2 MHP Land LLC">Columbia 2 MHP Land LLC</option>
                        <option value="Columbia MHP Homes LLC">Columbia MHP Homes LLC</option>
                        <option value="Columbia MHP Land LLC">Columbia MHP Land LLC</option>
                        <option value="Des Moines MHP Homes LLC">Des Moines MHP Homes LLC</option>
                        <option value="Des Moines MHP Land LLC">Des Moines MHP Land LLC</option>
                        <option value="Hamilton MHP Homes LLC">Hamilton MHP Homes LLC</option>
                        <option value="Hamilton MHP Land LLC">Hamilton MHP Land LLC</option>
                        <option value="Marshall MHP Homes LLC">Marshall MHP Homes LLC</option>
                        <option value="Marshall MHP Land LLC">Marshall MHP Land LLC</option>
                        <option value="Marshalltown MHP Homes LLC">Marshalltown MHP Homes LLC</option>
                        <option value="Marshalltown MHP Land LLC">Marshalltown MHP Land LLC</option>
                        <option value="Mediapolis MHP Homes LLC">Mediapolis MHP Homes LLC</option>
                        <option value="Mediapolis MHP Land LLC">Mediapolis MHP Land LLC</option>
                        <option value="Paradise Lane MHP & Storage, L.L.C">Paradise Lane MHP & Storage, L.L.C</option>
                        <option value="Paradise Lane MHP Homes LLC">Paradise Lane MHP Homes LLC</option>
                        <option value="QV Homes FFL LLC">QV Homes FFL LLC</option>
                        <option value="QV Land FFL LLC">QV Land FFL LLC</option>
                        <option value="Rantoul MHP Homes LLC">Rantoul MHP Homes LLC</option>
                        <option value="Rantoul MHP Land LLC">Rantoul MHP Land LLC</option>
                        <option value="Taylorville's Fairview MHP Homes LLC">Taylorville's Fairview MHP Homes LLC</option>
                        <option value="Taylorville's Fairview MHP Land LLC">Taylorville's Fairview MHP Land LLC</option>
                        <option value="Centralia MHP Land LLC">Centralia MHP Land LLC</option>
                        <option value="Centralia MHP Homes LLC">Centralia MHP Homes LLC</option>
                        <option value="Fairfield MHP Land LLC">Fairfield MHP Land LLC</option>
                        <option value="Fairfield MHP Homes LLC">Fairfield MHP Homes LLC</option>
                    </select>
                </div>
                <div class="input-group">
                    <label for="unit">Unit Number</label>
                    <span class="if-any">(If any)</span>
                    <input type="text" id="unit" placeholder="5022 E Paradise">
                </div>
                <div class="input-group">
                    <label for="expense">Allocation</label>
                    <span class="required">(required)</span>
                    <select id="expense" required>
                        <option value="">Select Expense</option>
                        <option value="1505 Mobile Homes Ownes">1505 Mobile Homes Ownes</option>
                        <option value="5109 Misc Repairs">5109 Misc Repairs</option>
                        <option value="5033 Mowing">5033 Mowing</option>
                    </select>
                </div>
                <div class="input-group">
                    <label for="description">Description</label>
                    <span class="required">(required)</span>
                    <input type="text" id="description" placeholder="Install new furnace" required>
                </div>
                <div class="input-group">
                    <label for="perDiem">Per Diem</label>
                    <input type="number" id="perDiem" placeholder="Optional" min="0" step="1">
                </div>
                <div class="input-group">
                    <label for="mileage">Driven Miles</label>
                    <input type="number" id="mileage" placeholder="Proportional" min="0" step="1">
                </div>
                <div class="input-group">
                    <label for="reimbursement">Reimbursement</label>
                    <input type="number" id="reimbursement" placeholder="If any" min="0" step="1">
                </div>
            </div>
            <button onclick="addTask()">Add Task</button>
            <button onclick="finishTimesheet()">Finish</button>
        </div>
        <div id="timesheetSummary" style="display:none;">
            <h2>Timesheet Summary</h2>
            <div class="table-container">
                <table id="summaryTable">
                    <thead>
                        <tr>
                            <th>Task</th>
                            <th>Employee</th>
                            <th>Date</th>
                            <th>Property</th>
                            <th>Unit</th>
                            <th>Expense</th>
                            <th>Description</th>
                            <th>Hours</th>
                            <th>Cost</th>
                            <th>Mileage</th>
                            <th>Per Diem</th>
                            <th>Reimb</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot>
                        <tr>
                            <td colspan="7">Total for <span id="employeeNameTotal"></span></td>
                            <td id="totalHours"></td>
                            <td id="totalCost"></td>
                            <td id="totalMileage"></td>
                            <td id="totalPerDiem"></td>
                            <td id="totalReimbursement"></td>
                            <td id="grandTotal"></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <button onclick="downloadExcel()">Download File</button>
            <button onclick="newEmployee()">New Employee</button>
            <button onclick="editTask()">Edit Task</button>
            <button onclick="addNewTask()">Add Task</button>
        </div>
    </div>

    <script>
        let tasks = [];
        let currentTask = 1;
        let hourlyRate = 0;
        let editingTaskIndex = -1;
        let isEditing = false;

        function formatDate(dateString) {
            const [year, month, day] = dateString.split('-');
            return `${month}/${day}/${year}`;
        }

        function updateDateTime() {
            const now = new Date();
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const dateStr = now.toLocaleDateString('en-US', options);
            const timeStr = now.toLocaleTimeString('en-US');
            document.getElementById('dateTime').textContent = `Today is ${dateStr} and it's ${timeStr}.`;

            const hour = now.getHours();
            let greeting = '';
            if (hour < 12) {
                greeting = 'Good morning!';
            } else if (hour < 18) {
                greeting = 'Good afternoon!';
            } else {
                greeting = 'Good evening!';
            }
            document.getElementById('greeting').textContent = greeting;
        }

        updateDateTime();
        setInterval(updateDateTime, 1000);

        function startApp() {
            document.getElementById('welcomePage').style.display = 'none';
            document.getElementById('appPage').style.display = 'block';
        }

        function startTimesheet() {
            const name = document.getElementById('employeeName').value;
            hourlyRate = parseFloat(document.getElementById('hourlyRate').value);
            if (name && !isNaN(hourlyRate) && hourlyRate > 0) {
                document.getElementById('employeeInfo').style.display = 'none';
                document.getElementById('taskForm').style.display = 'block';
            } else {
                alert('Please enter employee name and a valid hourly rate greater than zero.');
            }
        }

        function addTask() {
            const employeeName = document.getElementById('employeeName').value;
            const taskDate = document.getElementById('taskDate').value;
            const hoursWorked = Math.round(parseFloat(document.getElementById('hoursWorked').value));
            const property = document.getElementById('property').value;
            const unit = document.getElementById('unit').value;
            const expense = document.getElementById('expense').value;
            const description = document.getElementById('description').value;
            const perDiem = parseInt(document.getElementById('perDiem').value, 10) || 0;
            const mileage = parseInt(document.getElementById('mileage').value, 10) || 0;
            const reimbursement = parseInt(document.getElementById('reimbursement').value, 10) || 0;

            const requiredFields = ['taskDate', 'hoursWorked', 'property', 'expense', 'description'];
            let firstEmptyField = null;

            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (!field.value) {
                    field.classList.add('input-error');
                    if (!firstEmptyField) firstEmptyField = field;
                } else {
                    field.classList.remove('input-error');
                }
            });

            if (firstEmptyField) {
                firstEmptyField.focus();
                return;
            }

            if (taskDate && !isNaN(hoursWorked) && hoursWorked >= 1 && property && expense && description && perDiem >= 0 && mileage >= 0 && reimbursement >= 0) {
                const cost = hoursWorked * hourlyRate;
                const total = cost + perDiem + mileage * 0.655 + reimbursement;
                const task = {employeeName, taskDate, property, unit, expense, description, hoursWorked, cost, mileage, perDiem, reimbursement, total};
                
                if (isEditing) {
                    tasks[editingTaskIndex] = task;
                } else {
                    tasks.push(task);
                }
                
                resetTaskForm();
                
                if (isEditing) {
                    finishEditing();
                } else if (document.getElementById('timesheetSummary').style.display === 'block') {
                    finishTimesheet();
                } else {
                    currentTask++;
                    document.getElementById('taskNumber').textContent = currentTask;
                }
            } else {
                alert('Please fill all required fields. Hours worked must be a whole number greater than or equal to one. Per diem, mileage, and reimbursement cannot be negative.');
            }
        }

        function resetTaskForm() {
            document.getElementById('taskDate').value = '';
            document.getElementById('hoursWorked').value = '';
            document.getElementById('property').value = '';
            document.getElementById('unit').value = '';
            document.getElementById('expense').value = '';
            document.getElementById('description').value = '';
            document.getElementById('perDiem').value = '';
            document.getElementById('mileage').value = '';
            document.getElementById('reimbursement').value = '';
        }

        function finishTimesheet() {
            if (tasks.length === 0) {
                alert('Please add at least one task.');
                return;
            }
            document.getElementById('taskForm').style.display = 'none';
            document.getElementById('timesheetSummary').style.display = 'block';
            updateSummaryTable();
            
            const addTaskButton = document.querySelector('#taskForm button:nth-of-type(1)');
            addTaskButton.textContent = 'Add Task';
            addTaskButton.onclick = addTask;
            
            document.querySelector('#taskForm button:nth-of-type(2)').style.display = 'inline-block';
        }

        function updateSummaryTable() {
            const tableBody = document.querySelector('#summaryTable tbody');
            tableBody.innerHTML = '';
            let totalHours = 0, totalCost = 0, totalMileage = 0, totalPerDiem = 0, totalReimbursement = 0, grandTotal = 0;
            tasks.forEach((task, index) => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${task.employeeName}</td>
                    <td>${formatDate(task.taskDate)}</td>
                    <td>${task.property}</td>
                    <td>${task.unit}</td>
                    <td>${task.expense}</td>
                    <td>${task.description}</td>
                    <td>${task.hoursWorked.toFixed(0)}</td>
                    <td>$${task.cost.toFixed(2)}</td>
                    <td>$${(task.mileage * 0.655).toFixed(2)}</td>
                    <td>$${task.perDiem.toFixed(2)}</td>
                    <td>$${task.reimbursement.toFixed(2)}</td>
                    <td>$${task.total.toFixed(2)}</td>
                `;
                totalHours += task.hoursWorked;
                totalCost += task.cost;
                totalMileage += task.mileage * 0.655;
                totalPerDiem += task.perDiem;
                totalReimbursement += task.reimbursement;
                grandTotal += task.total;
            });
            
            const employeeName = document.getElementById('employeeName').value;
            document.getElementById('employeeNameTotal').textContent = employeeName;

            document.getElementById('totalHours').textContent = totalHours.toFixed(0);
            document.getElementById('totalCost').textContent = '$' + totalCost.toFixed(2);
            document.getElementById('totalMileage').textContent = '$' + totalMileage.toFixed(2);
            document.getElementById('totalPerDiem').textContent = '$' + totalPerDiem.toFixed(2);
            document.getElementById('totalReimbursement').textContent = '$' + totalReimbursement.toFixed(2);
            document.getElementById('grandTotal').textContent = '$' + grandTotal.toFixed(2);
        }

        function addNewTask() {
            currentTask = tasks.length + 1;
            document.getElementById('taskNumber').textContent = currentTask;
            resetTaskForm();
            document.getElementById('timesheetSummary').style.display = 'none';
            document.getElementById('taskForm').style.display = 'block';
            
            const addTaskButton = document.querySelector('#taskForm button:nth-of-type(1)');
            addTaskButton.textContent = 'Add New Task';
            addTaskButton.onclick = function() {
                addTask();
                finishTimesheet();
            };
            
            document.querySelector('#taskForm button:nth-of-type(2)').style.display = 'none';
        }

        function editTask() {
            const taskNumber = prompt("Enter the task number you want to edit:");
            if (taskNumber && !isNaN(taskNumber) && taskNumber > 0 && taskNumber <= tasks.length) {
                editingTaskIndex = parseInt(taskNumber) - 1;
                isEditing = true;
                const task = tasks[editingTaskIndex];
                
                document.getElementById('taskNumber').textContent = taskNumber;
                document.getElementById('taskDate').value = task.taskDate;
                document.getElementById('hoursWorked').value = task.hoursWorked;
                document.getElementById('property').value = task.property;
                document.getElementById('unit').value = task.unit;
                document.getElementById('expense').value = task.expense;
                document.getElementById('description').value = task.description;
                document.getElementById('perDiem').value = task.perDiem;
                document.getElementById('mileage').value = task.mileage;
                document.getElementById('reimbursement').value = task.reimbursement;
                
                document.getElementById('timesheetSummary').style.display = 'none';
                document.getElementById('taskForm').style.display = 'block';
                
                const addTaskButton = document.querySelector('#taskForm button:nth-of-type(1)');
                addTaskButton.textContent = 'Update Task';
                
                document.querySelector('#taskForm button:nth-of-type(2)').style.display = 'none';
            } else {
                alert('Please enter a valid task number.');
            }
        }

        function finishEditing() {
            isEditing = false;
            editingTaskIndex = -1;
            document.getElementById('taskForm').style.display = 'none';
            document.getElementById('timesheetSummary').style.display = 'block';
            finishTimesheet();
            
            const addTaskButton = document.querySelector('#taskForm button:nth-of-type(1)');
            addTaskButton.textContent = 'Add Task';
            
            document.querySelector('#taskForm button:nth-of-type(2)').style.display = 'inline-block';
        }

        function downloadExcel() {
            const wb = XLSX.utils.book_new();
            const ws = XLSX.utils.table_to_sheet(document.getElementById('summaryTable'));
            XLSX.utils.book_append_sheet(wb, ws, "Timesheet");
            
            const employeeName = document.getElementById('employeeName').value;
            const currentDate = new Date();
            const formattedDate = `${(currentDate.getMonth() + 1).toString().padStart(2, '0')}/${currentDate.getDate().toString().padStart(2, '0')}/${currentDate.getFullYear()}`;
            const filename = `timesheet_${employeeName}_${formattedDate}.xlsx`;
            XLSX.writeFile(wb, filename);
        }

        function newEmployee() {
            tasks = [];
            currentTask = 1;
            hourlyRate = 0;
            document.getElementById('employeeName').value = '';
            document.getElementById('hourlyRate').value = '';
            document.getElementById('taskNumber').textContent = '1';
            resetTaskForm();
            document.getElementById('timesheetSummary').style.display = 'none';
            document.getElementById('employeeInfo').style.display = 'block';
        }

        function resetFieldStyle(event) {
            event.target.classList.remove('input-error');
        }

        document.addEventListener('DOMContentLoaded', function() {
            const requiredFields = ['taskDate', 'hoursWorked', 'property', 'expense', 'description'];
            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                field.addEventListener('input', resetFieldStyle);
            });
        });

    </script>
</body></html>
